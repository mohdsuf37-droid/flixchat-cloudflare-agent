import "./chunk-QK4CVDZM.js";

// src/ai-react.tsx
import { useChat } from "@ai-sdk/react";
import { useEffect, use } from "react";
var requestCache = /* @__PURE__ */ new Map();
function useAgentChat(options) {
  const { agent, ...rest } = options;
  const url = agent._pkurl.replace("ws://", "http://").replace("wss://", "https://") + "/get-messages";
  const initialMessages = use(
    (() => {
      if (requestCache.has(url)) {
        return requestCache.get(url);
      }
      const promise = fetch(new Request(url)).then((res) => res.json());
      requestCache.set(url, promise);
      return promise;
    })()
  );
  async function aiFetch(request, options2 = {}) {
    const {
      method,
      keepalive,
      headers,
      body,
      redirect,
      integrity,
      signal,
      credentials,
      mode,
      referrer,
      referrerPolicy,
      window
      //  dispatcher, duplex
    } = options2;
    const id = crypto.randomUUID();
    const abortController = new AbortController();
    signal?.addEventListener("abort", () => {
      abortController.abort();
    });
    agent.addEventListener(
      "message",
      (event) => {
        const data = JSON.parse(event.data);
        if (data.type === "cf_agent_use_chat_response") {
          if (data.id === id) {
            controller.enqueue(new TextEncoder().encode(data.body));
            if (data.done) {
              controller.close();
              abortController.abort();
            }
          }
        }
      },
      { signal: abortController.signal }
    );
    let controller;
    const stream = new ReadableStream({
      start(c) {
        controller = c;
      }
    });
    agent.send(
      JSON.stringify({
        type: "cf_agent_use_chat_request",
        id,
        url: request.toString(),
        init: {
          method,
          keepalive,
          headers,
          body,
          redirect,
          integrity,
          credentials,
          mode,
          referrer,
          referrerPolicy,
          window
          // dispatcher,
          // duplex
        }
      })
    );
    return new Response(stream);
  }
  const useChatHelpers = useChat({
    initialMessages,
    sendExtraMessageFields: true,
    fetch: aiFetch,
    ...rest
  });
  useEffect(() => {
    agent.send(
      JSON.stringify({
        type: "cf_agent_chat_init"
      })
    );
    function onClearHistory(event) {
      const data = JSON.parse(event.data);
      if (data.type === "cf_agent_chat_clear") {
        useChatHelpers.setMessages([]);
      }
    }
    function onMessages(event) {
      const data = JSON.parse(event.data);
      if (data.type === "cf_agent_chat_messages") {
        useChatHelpers.setMessages(data.messages);
      }
    }
    agent.addEventListener("message", onClearHistory);
    agent.addEventListener("message", onMessages);
    return () => {
      agent.removeEventListener("message", onClearHistory);
      agent.removeEventListener("message", onMessages);
    };
  }, []);
  return {
    ...useChatHelpers,
    setMessages: (messages) => {
      useChatHelpers.setMessages(messages);
      agent.send(
        JSON.stringify({
          type: "cf_agent_chat_messages",
          messages
        })
      );
    },
    clearHistory: () => {
      useChatHelpers.setMessages([]);
      agent.send(
        JSON.stringify({
          type: "cf_agent_chat_clear"
        })
      );
    }
  };
}
export {
  useAgentChat
};
//# sourceMappingURL=ai-react.js.map