{"version":3,"sources":["../src/client.ts"],"sourcesContent":["import {\n  PartySocket,\n  type PartySocketOptions,\n  type PartyFetchOptions,\n} from \"partysocket\";\n\nexport type AgentClientOptions = Omit<PartySocketOptions, \"party\" | \"room\"> & {\n  agent: string;\n  name?: string;\n};\n\nexport type AgentClientFetchOptions = Omit<\n  PartyFetchOptions,\n  \"party\" | \"room\"\n> & {\n  agent: string;\n  name?: string;\n};\n\nexport class AgentClient extends PartySocket {\n  static fetch(opts: PartyFetchOptions): Promise<Response> {\n    throw new Error(\n      \"AgentClient.fetch is not implemented, use agentFetch instead\"\n    );\n  }\n  constructor(opts: AgentClientOptions) {\n    super({\n      prefix: \"agents\",\n      party: opts.agent,\n      room: opts.name || \"default\",\n      ...opts,\n    });\n  }\n}\n\nexport function agentFetch(opts: AgentClientFetchOptions, init?: RequestInit) {\n  return PartySocket.fetch(\n    {\n      prefix: \"agents\",\n      party: opts.agent,\n      room: opts.name || \"default\",\n      ...opts,\n    },\n    init\n  );\n}\n"],"mappings":";AAAA;AAAA,EACE;AAAA,OAGK;AAeA,IAAM,cAAN,cAA0B,YAAY;AAAA,EAC3C,OAAO,MAAM,MAA4C;AACvD,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EACA,YAAY,MAA0B;AACpC,UAAM;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK,QAAQ;AAAA,MACnB,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AACF;AAEO,SAAS,WAAW,MAA+B,MAAoB;AAC5E,SAAO,YAAY;AAAA,IACjB;AAAA,MACE,QAAQ;AAAA,MACR,OAAO,KAAK;AAAA,MACZ,MAAM,KAAK,QAAQ;AAAA,MACnB,GAAG;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;","names":[]}