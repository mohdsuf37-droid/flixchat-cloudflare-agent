import { Server, Connection, PartyServerOptions } from "partyserver";
export { Connection, ConnectionContext, WSMessage } from "partyserver";
import { WorkflowEntrypoint as WorkflowEntrypoint$1 } from "cloudflare:workers";

declare class WorkflowEntrypoint extends WorkflowEntrypoint$1 {}
type Schedule<T = string> = {
  id: string;
  callback: string;
  payload: T;
} & (
  | {
      type: "scheduled";
      time: number;
    }
  | {
      type: "delayed";
      time: number;
      delayInSeconds: number;
    }
  | {
      type: "cron";
      time: number;
      cron: string;
    }
);
declare class Agent<Env, State = unknown> extends Server<Env> {
  #private;
  state: State | undefined;
  static options: {
    hibernate: boolean;
  };
  sql<T = Record<string, any>>(
    strings: TemplateStringsArray,
    ...values: any[]
  ): T[];
  constructor(ctx: AgentContext, env: Env);
  setState(state: State): void;
  onStateUpdate(state: State | undefined, source: Connection | "server"): void;
  onEmail(email: ForwardableEmailMessage): void;
  render(): void;
  schedule<T = string>(
    when: Date | string | number,
    callback: string,
    payload: T
  ): Promise<Schedule<T>>;
  getSchedule<T = string>(id: string): Promise<Schedule<T> | undefined>;
  getSchedules<T = string>(criteria?: {
    description?: string;
    id?: string;
    type?: "scheduled" | "delayed" | "cron";
    timeRange?: {
      start?: Date;
      end?: Date;
    };
  }): Schedule<T>[];
  cancelSchedule(id: string): Promise<boolean>;
  private scheduleNextAlarm;
  alarm(): Promise<void>;
  destroy(): Promise<void>;
}
type AgentNamespace<Agentic extends Agent<unknown>> =
  DurableObjectNamespace<Agentic>;
type AgentContext = DurableObjectState;
type AgentOptions<Env> = PartyServerOptions<Env>;
declare function routeAgentRequest<Env>(
  request: Request,
  env: Env,
  options?: AgentOptions<Env>
): Promise<Response | null>;
declare function routeAgentEmail<Env>(
  email: ForwardableEmailMessage,
  env: Env,
  options?: AgentOptions<Env>
): Promise<void>;
declare function getAgentByName<Env, T extends Agent<Env>>(
  namespace: AgentNamespace<T>,
  name: string,
  options?: {
    jurisdiction?: DurableObjectJurisdiction;
    locationHint?: DurableObjectLocationHint;
  }
): Promise<DurableObjectStub<T>>;

export {
  Agent,
  type AgentContext,
  type AgentNamespace,
  type AgentOptions,
  type Schedule,
  WorkflowEntrypoint,
  getAgentByName,
  routeAgentEmail,
  routeAgentRequest,
};
