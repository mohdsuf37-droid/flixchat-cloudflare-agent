{"version":3,"sources":["../src/ai-react.tsx"],"sourcesContent":["import { useChat } from \"@ai-sdk/react\";\nimport type { Message } from \"ai\";\nimport { useAgent } from \"./react\";\nimport { useEffect, use } from \"react\";\nimport type { OutgoingMessage } from \"./ai-types\";\ntype UseAgentChatOptions = Omit<\n  Parameters<typeof useChat>[0] & {\n    agent: ReturnType<typeof useAgent>;\n  },\n  \"fetch\"\n>;\n\n// TODO: clear cache when the agent is unmounted?\nconst requestCache = new Map<string, Promise<any>>();\n\nexport function useAgentChat(options: UseAgentChatOptions) {\n  const { agent, ...rest } = options;\n  const url =\n    agent._pkurl.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\") +\n    \"/get-messages\";\n\n  const initialMessages = use(\n    (() => {\n      if (requestCache.has(url)) {\n        return requestCache.get(url)!;\n      }\n      const promise = fetch(new Request(url)).then((res) => res.json());\n      requestCache.set(url, promise);\n      return promise;\n    })()\n  );\n\n  async function aiFetch(\n    request: RequestInfo | URL,\n    options: RequestInit = {}\n  ) {\n    // we're going to use a websocket to do the actual \"fetching\"\n    // but still satisfy the type signature of the fetch function\n    // so we'll return a promise that resolves to a response\n\n    const {\n      method,\n      keepalive,\n      headers,\n      body,\n      redirect,\n      integrity,\n      signal,\n      credentials,\n      mode,\n      referrer,\n      referrerPolicy,\n      window,\n      //  dispatcher, duplex\n    } = options;\n    const id = crypto.randomUUID();\n    const abortController = new AbortController();\n\n    signal?.addEventListener(\"abort\", () => {\n      abortController.abort();\n    });\n\n    agent.addEventListener(\n      \"message\",\n      (event) => {\n        const data = JSON.parse(event.data) as OutgoingMessage;\n        if (data.type === \"cf_agent_use_chat_response\") {\n          if (data.id === id) {\n            controller.enqueue(new TextEncoder().encode(data.body));\n            if (data.done) {\n              controller.close();\n              abortController.abort();\n            }\n          }\n        }\n      },\n      { signal: abortController.signal }\n    );\n\n    let controller: ReadableStreamDefaultController;\n\n    const stream = new ReadableStream({\n      start(c) {\n        controller = c;\n      },\n    });\n\n    agent.send(\n      JSON.stringify({\n        type: \"cf_agent_use_chat_request\",\n        id,\n        url: request.toString(),\n        init: {\n          method,\n          keepalive,\n          headers,\n          body,\n          redirect,\n          integrity,\n          credentials,\n          mode,\n          referrer,\n          referrerPolicy,\n          window,\n          // dispatcher,\n          // duplex\n        },\n      })\n    );\n\n    return new Response(stream);\n  }\n  const useChatHelpers = useChat({\n    initialMessages,\n    sendExtraMessageFields: true,\n    fetch: aiFetch,\n    ...rest,\n  });\n\n  useEffect(() => {\n    agent.send(\n      JSON.stringify({\n        type: \"cf_agent_chat_init\",\n      })\n    );\n\n    function onClearHistory(event: MessageEvent) {\n      const data = JSON.parse(event.data) as OutgoingMessage;\n      if (data.type === \"cf_agent_chat_clear\") {\n        useChatHelpers.setMessages([]);\n      }\n    }\n\n    function onMessages(event: MessageEvent) {\n      const data = JSON.parse(event.data) as OutgoingMessage;\n      if (data.type === \"cf_agent_chat_messages\") {\n        useChatHelpers.setMessages(data.messages);\n      }\n    }\n\n    agent.addEventListener(\"message\", onClearHistory);\n    agent.addEventListener(\"message\", onMessages);\n\n    return () => {\n      agent.removeEventListener(\"message\", onClearHistory);\n      agent.removeEventListener(\"message\", onMessages);\n    };\n  }, []);\n\n  return {\n    ...useChatHelpers,\n    setMessages: (messages: Message[]) => {\n      useChatHelpers.setMessages(messages);\n      agent.send(\n        JSON.stringify({\n          type: \"cf_agent_chat_messages\",\n          messages,\n        })\n      );\n    },\n    clearHistory: () => {\n      useChatHelpers.setMessages([]);\n      agent.send(\n        JSON.stringify({\n          type: \"cf_agent_chat_clear\",\n        })\n      );\n    },\n  };\n}\n"],"mappings":"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","names":["options"]}