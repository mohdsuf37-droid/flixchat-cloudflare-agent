{"version":3,"sources":["../src/react.tsx"],"sourcesContent":["import type { PartySocket } from \"partysocket\";\nimport { usePartySocket } from \"partysocket/react\";\n\nexport type UseAgentOptions<State = unknown> = Omit<\n  Parameters<typeof usePartySocket>[0],\n  \"party\" | \"room\"\n> & {\n  agent: string;\n  name?: string;\n  onStateUpdate?: (state: State, source: \"server\" | \"client\") => void;\n};\n\nexport function useAgent<State = unknown>(\n  options: UseAgentOptions<State>\n): PartySocket & { setState: (state: State) => void } {\n  const agent = usePartySocket({\n    prefix: \"agents\",\n    party: options.agent,\n    room: options.name || \"default\",\n    ...options,\n    onMessage: (message) => {\n      if (\n        typeof message.data === \"string\" &&\n        message.data.startsWith(\"cf_agent_state:\")\n      ) {\n        const parsedMessage = JSON.parse(message.data.slice(15));\n        options.onStateUpdate?.(parsedMessage.state, \"server\");\n        return;\n      }\n      options.onMessage?.(message);\n    },\n  }) as PartySocket & { setState: (state: State) => void };\n\n  agent.setState = (state: State) => {\n    agent.send(\n      \"cf_agent_state:\" + JSON.stringify({ type: \"cf_agent_state\", state })\n    );\n    options.onStateUpdate?.(state, \"client\");\n  };\n\n  return agent;\n}\n"],"mappings":";AACA,SAAS,sBAAsB;AAWxB,SAAS,SACd,SACoD;AACpD,QAAM,QAAQ,eAAe;AAAA,IAC3B,QAAQ;AAAA,IACR,OAAO,QAAQ;AAAA,IACf,MAAM,QAAQ,QAAQ;AAAA,IACtB,GAAG;AAAA,IACH,WAAW,CAAC,YAAY;AACtB,UACE,OAAO,QAAQ,SAAS,YACxB,QAAQ,KAAK,WAAW,iBAAiB,GACzC;AACA,cAAM,gBAAgB,KAAK,MAAM,QAAQ,KAAK,MAAM,EAAE,CAAC;AACvD,gBAAQ,gBAAgB,cAAc,OAAO,QAAQ;AACrD;AAAA,MACF;AACA,cAAQ,YAAY,OAAO;AAAA,IAC7B;AAAA,EACF,CAAC;AAED,QAAM,WAAW,CAAC,UAAiB;AACjC,UAAM;AAAA,MACJ,oBAAoB,KAAK,UAAU,EAAE,MAAM,kBAAkB,MAAM,CAAC;AAAA,IACtE;AACA,YAAQ,gBAAgB,OAAO,QAAQ;AAAA,EACzC;AAEA,SAAO;AACT;","names":[]}