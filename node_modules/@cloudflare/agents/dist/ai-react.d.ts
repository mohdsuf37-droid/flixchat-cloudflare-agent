import * as ai from "ai";
import { Message } from "ai";
import { useChat } from "@ai-sdk/react";
import { useAgent } from "./react.js";
import "partysocket";
import "partysocket/react";

type UseAgentChatOptions = Omit<
  Parameters<typeof useChat>[0] & {
    agent: ReturnType<typeof useAgent>;
  },
  "fetch"
>;
declare function useAgentChat(options: UseAgentChatOptions): {
  setMessages: (messages: Message[]) => void;
  clearHistory: () => void;
  messages: ai.UIMessage[];
  error: undefined | Error;
  append: (
    message: Message | ai.CreateMessage,
    chatRequestOptions?: ai.ChatRequestOptions
  ) => Promise<string | null | undefined>;
  reload: (
    chatRequestOptions?: ai.ChatRequestOptions
  ) => Promise<string | null | undefined>;
  stop: () => void;
  input: string;
  setInput: React.Dispatch<React.SetStateAction<string>>;
  handleInputChange: (
    e:
      | React.ChangeEvent<HTMLInputElement>
      | React.ChangeEvent<HTMLTextAreaElement>
  ) => void;
  handleSubmit: (
    event?: {
      preventDefault?: () => void;
    },
    chatRequestOptions?: ai.ChatRequestOptions
  ) => void;
  metadata?: Object;
  isLoading: boolean;
  status: "submitted" | "streaming" | "ready" | "error";
  data?: ai.JSONValue[];
  setData: (
    data:
      | ai.JSONValue[]
      | undefined
      | ((data: ai.JSONValue[] | undefined) => ai.JSONValue[] | undefined)
  ) => void;
  id: string;
  addToolResult: ({
    toolCallId,
    result,
  }: {
    toolCallId: string;
    result: any;
  }) => void;
};

export { useAgentChat };
